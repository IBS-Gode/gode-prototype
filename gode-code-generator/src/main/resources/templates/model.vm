#if($StringUtils.upperCase(${entity.database}) == "MONGO")
    #set($springrepo = "MongoRepository")
#else
    #set($springrepo = "JpaRepository")
#end

package org.ibs.cdx.gode.entity.model;

#if(${springrepo} == "MongoRepository")
import org.springframework.data.mongodb.core.mapping.Document;
#else
import javax.persistence.Entity;
#end
import javax.persistence.Id;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import org.ibs.cdx.gode.entity.StoreEntity;

import org.ibs.cdx.gode.util.EntityUtil;

import org.ibs.cdx.gode.dl.Learned;
import org.ibs.cdx.gode.dl.LearningRequired;

import java.util.Arrays;
import java.util.List;
import javax.persistence.Transient;


#if(${springrepo} == "MongoRepository")
@Document
#else
@Entity
#end
public class ${entity.name} extends StoreEntity<${entity.idField.datatype}> implements LearningRequired< ${entity.name},String>, Learned< ${entity.name},String>{


    #foreach ($attr in ${entity.attributes})
        #set($attrExp = $StringUtils.camelCase(${attr.name}))
        #set($attrName = $StringUtils.lowerCase(${attr.name}))

        private ${attr.datatype} $attrName;
        public void set$attrExp(${attr.datatype} $attrName){
            this.$attrName =  $attrName;
        }

        public ${attr.datatype} get$attrExp(){
            return this.$attrName ;
        }
    #end

    #set($attrExp = $StringUtils.camelCase(${entity.idField.name}))
    #set($attrName = $StringUtils.lowerCase(${entity.idField.name}))

    private @Id ${entity.idField.datatype} $attrName;
    private @Transient String character;
    public void set$attrExp(${entity.idField.datatype} $attrName){
    this.$attrName =  $attrName;
    }

    public ${entity.idField.datatype} get$attrExp(){
    return this.$attrName ;
    }

    @Override
    public String identifierField() {
    return "${attrName}";
    }

    public void setEntityId(${entity.idField.datatype} $attrName){
    this.$attrName =  $attrName;
    }

    public ${entity.idField.datatype} getEntityId(){
    return this.$attrName ;
    }

    @Override
    public List<String> characters() {
        return Arrays.asList($StringUtils.camelJoin($entity.tags));
    }

    @Override
    public List<String> analysedFields() {
        return EntityUtil.attributes(${entity.name}.class,"character");
     }

        @Override
        public void setCharacter(String character) {
            this.character = character;
        }

        @Override
        public String getCharacter() {
        return character;
        }


    }
